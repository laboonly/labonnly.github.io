(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{490:function(s,n,e){"use strict";e.r(n);var t=e(4),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"js-中的二叉树的深度遍历与广度遍历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-中的二叉树的深度遍历与广度遍历"}},[s._v("#")]),s._v(" JS 中的二叉树的深度遍历与广度遍历")]),s._v(" "),e("blockquote",[e("p",[s._v("栈，队列，链表等数据结构都是顺序数据结构。而数是分顺序数据结构。树形结构是一类非线性结构。直观地，树型结构是以分支关系定义的层次结构。")])]),s._v(" "),e("h2",{attrs:{id:"树的简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#树的简介"}},[s._v("#")]),s._v(" 树的简介")]),s._v(" "),e("ol",[e("li",[s._v("树有两种储存结构，一种是顺序储存，一种是链式储存。")]),s._v(" "),e("li",[s._v("树的节点拥有的字树数成为结点的"),e("strong",[s._v("度")]),s._v("，"),e("strong",[s._v("度")]),s._v("为0的节点称为叶子(Leaf)合作和终端结点,树的度是树内各结点的最大值。")]),s._v(" "),e("li",[s._v("结点的层次(Level)从跟开始定义起，根为第一层，根的孩子为第二层。若某结点在第l层，则其子树在第l+1层。树中节点的最大层次称为树的深度或高度。")]),s._v(" "),e("li",[s._v("如果树的结点的各子树从左至右是有次序的(既不能交换)，则称改树为有序树，否则称为无序树。")]),s._v(" "),e("li",[s._v("森林(Forest)是m(m >= 0)棵互不相交的树的集合。对树中每个结点而言，其子树的集合即为森林")]),s._v(" "),e("li",[e("strong",[s._v("二叉树(Binary Tree)")]),s._v(" 是另一种树形结构，它的特点是每个节点至多只有两棵子树，并且二叉树子树有左右之分其次序不能颠倒")])]),s._v(" "),e("h2",{attrs:{id:"二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[s._v("#")]),s._v(" 二叉树")]),s._v(" "),e("ol",[e("li",[s._v("在二叉树的第i层上至多有$2^i-1$")]),s._v(" "),e("li",[s._v("深度为k的二叉树至多有2^k-1个结点")]),s._v(" "),e("li",[s._v("对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0 = n2 + 1;")]),s._v(" "),e("li",[e("ul",[e("li",[s._v("一棵深度为k且有2^k  - 1个结点的二叉树称为"),e("strong",[s._v("满二叉树")]),s._v("。")])])]),s._v(" "),e("li",[e("ul",[e("li",[s._v("深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点一一对应时，称之为"),e("strong",[s._v("完全二叉树")]),s._v("。")])])])]),s._v(" "),e("h2",{attrs:{id:"完全二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树"}},[s._v("#")]),s._v(" 完全二叉树")]),s._v(" "),e("ol",[e("li",[s._v("具有n个结点的完全二叉树的深度为"),e("code",[s._v("Math.floor($\\log_2 10$)+1")]),s._v(";")]),s._v(" "),e("li",[s._v("…")])]),s._v(" "),e("h2",{attrs:{id:"二叉树的遍历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历"}},[s._v("#")]),s._v(" 二叉树的遍历")]),s._v(" "),e("ul",[e("li",[s._v("深度遍历\n"),e("ol",[e("li",[s._v("先序遍历： 访问根根结点 -> 访问左子树 -> 访问右子树。 前序遍历适合用来显示目录结构")]),s._v(" "),e("li",[s._v("中序遍历： 访问左子树 -> 访问根节点 -> 访问右子树。 可以用来实现表达式书在编译器底层很有用")]),s._v(" "),e("li",[s._v("后续遍历： 访问左子树 -> 访问右子树 -> 访问根结点。 可以用来实现计算机内的文件及其信息")])])]),s._v(" "),e("li",[s._v("广度遍历\n按照层次一层层遍历")])]),s._v(" "),e("blockquote",[e("p",[s._v("先序遍历"),e("br"),s._v("\n递归遍历")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var res = []\nfunction dfs(nodes) {\n\tif(nodes) {\n\t\tres.push(nodes.value)\n\t\tdfs(nodes.left)\n\t\tdfs(nodes.right)\n\t}\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("非递归遍历")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function dfs(node) {\n\tlet res = []\n\tlet stack = []\n\tstack.push(node)\n\twhile(stack.length) {\n\t\tlet node = stack.pop()\n\t\tres.push(node.value)\n\t\tif(node.right) stack.push(node.right)\n\t\tif(node.left) stack.push(node.left)\n\t}\n\treturn res\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("blockquote",[e("p",[s._v("中序遍历"),e("br"),s._v("\n递归遍历：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var res = []\nfunction dfs(nodes) {\n\tif(nodes) {\n\t\tdfs(nodes.left)\n\t\tres.push(nodes.value)\n\t\tdfs(nodes.right)\n\t}\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("非递归遍历：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function dfs(node) {\n\tlet res = []\n\tlet stack = []\n\twhile(stack.length || node) {\n\t\tif(node) {\n\t\t\tstack.push(node)\n\t\t\tnode = node.left\n\t\t} else {\n\t\t\tnode = stack.pop()\n\t\t\tres.push(node.value)\n\t\t\tnode = node.right\n\t\t}\t\n\t}\n\treturn res\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("blockquote",[e("p",[s._v("后序遍历"),e("br"),s._v("\n递归遍历")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var res = []\nfunction dfs(nodes) {\n\tif(nodes) {\n\t\tdfs(nodes.left)\n\t\tdfs(nodes.right)\n\t\tres.push(nodes.value)\n\t}\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("非递归遍历：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("unction dfs(node) {\n    let result = [];\n    let stack = [];\n    stack.push(node);\n    while(stack.length) {\n        // 不能用node.touched !== ‘left’ 标记‘left’做判断，\n        // 因为回溯到该结点时，遍历右子树已经完成，该结点标记被更改为‘right’ 若用标记‘left’判断该if语句会一直生效导致死循环\n        if(node.left && !node.touched) { // 不要写成if(node.left && node.touched !== ‘left’)\n            // 遍历结点左子树时，对该结点做 ‘left’标记；为了子结点回溯到该（双亲）结点时，便不再访问左子树\n            node.touched = ‘left’;\n            node = node.left;\n            stack.push(node);\n            continue;\n        }\n        if(node.right && node.touched !== ‘right’) { // 右子树同上\n            node.touched = ‘right’;\n            node = node.right;\n            stack.push(node);\n            continue;\n        }\n        node = stack.pop(); // 该结点无左右子树时，从栈中取出一个结点，访问(并清理标记)\n        node.touched && delete node.touched; // 可以不清理不影响结果 只是第二次对同一颗树再执行该后序遍历方法时，结果就会出错啦因为你对这棵树做的标记还留在这棵树上\n        result.push(node.value);\n        node = stack.length ? stack[stack.length - 1] : null;\n        //node = stack.pop(); 这时当前结点不再从栈中取（弹出），而是不改变栈数据直接访问栈中最后一个结点\n        //如果这时当前结点去栈中取（弹出）会导致回溯时当该结点左右子树都被标记过时 当前结点又变成从栈中取会漏掉对结点的访问（存入结果数组中）\n    }\n    return result; // 返回值\n}\n\ndfs(tree);\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("blockquote",[e("p",[s._v("广度优先遍历"),e("br"),s._v("\n递归遍历：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nlet result = [];\nlet stack = [tree]; // 先将要遍历的树压入栈\nlet count = 0; // 用来记录执行到第一层\nlet bfs = function () {\n    let node = stack[count];\n    if(node) {\n        result.push(node.value);\n        if(node.left) stack.push(node.left);\n        if(node.right) stack.push(node.right);\n        count++;\n        bfs();\n    }\n}\ndfc();\nconsole.log(result);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("非递归遍历：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.\nfunction bfs(node) {\n    let result = [];\n    let queue = [];\n    queue.push(node);\n    let pointer = 0;\n    while(pointer < queue.length) {\n        let node = queue[pointer++]; // // 这里不使用 shift 方法（复杂度高），用一个指针代替\n        result.push(node.value);\n        node.left && queue.push(node.left);\n        node.right && queue.push(node.right);\n    }\n    return result;\n}\n\nbfs(tree);\n\n2.\n\nfunction bfs(node) {\n    let result = [];\n    let queue = [];\n    queue.push(node);\n    let pointer = 0;\n    while(pointer < queue.length) {\n        let node = queue[pointer++]; // // 这里不使用 shift 方法（复杂度高），用一个指针代替\n        result.push(node.value);\n        node.left && queue.push(node.left);\n        node.right && queue.push(node.right);\n    }\n    return result;\n}\n\nbfs(tree);\n\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br")])])])}),[],!1,null,null,null);n.default=a.exports}}]);
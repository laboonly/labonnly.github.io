(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{508:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"js数组常用的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js数组常用的方法"}},[s._v("#")]),s._v(" JS数组常用的方法")]),s._v(" "),a("h2",{attrs:{id:"不会改变原数组的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不会改变原数组的"}},[s._v("#")]),s._v(" 不会改变原数组的：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("map")]),s._v(":\n创建一个新数组，其结果是该数组中的每个元素都调用一次提供的函数后的返回值。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tvar new_array = arr.map(function callback(currentValue[, index[, array]]) \t\t{\n \t\t\t// Return element for new_array \n\t\t}[, thisArg])\n\tarr.map(x => x +1); \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[s._v("toString()")]),s._v(" 将数组元素转换成一个由“，”隔开的字符串")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("filter")]),s._v(": 返回符合要求的元素\nvar newArray = arr.filter(callback(element[, index[, array]])[, thisArg])")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("some")]),s._v(": 有一项返回true，则整体为true\n"),a("em",[s._v("arr")]),s._v(".some("),a("em",[s._v("callback(element[, index[, array]])[, thisArg]")]),s._v(")")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("every")]),s._v(": 有一项返回false，则整体为false\narr.every(callback[, thisArg])")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("join")]),s._v(": 方法将一个数组（或一个 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN//docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects",target:"_blank",rel:"noopener noreferrer"}},[s._v("类数组对象"),a("OutboundLink")],1),s._v(" ）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const elements = ['Fire', 'Air', 'Water'];\n\nconsole.log(elements.join());\n// expected output: \"Fire,Air,Water\"\n\nconsole.log(elements.join(''));\n// expected output: \"FireAirWater\"\n\nconsole.log(elements.join('-'));\n// expected output: \"Fire-Air-Water\"\t\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ol",{attrs:{start:"11"}},[a("li",[a("strong",[s._v("concat")]),s._v(": 连接数组，不影响原数组， 浅拷贝")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tconst array3 = array1.concat(array2);\n\tvar num1 = [[1]];\n\tvar num2 = [2, [3]];\n\tvar num3=[5,[6]];\n\n\tvar nums = num1.concat(num2);\n\n\tconsole.log(nums);\n\t// results is [[1], 2, [3]]\n\n\tvar nums2=num1.concat(4,num3);\n\n\tconsole.log(nums2)\n\t// results is [[1], 4, 5,[6]]\n\n\t// modify the first element of num1\n\tnum1[0].push(4);\n\n\tconsole.log(nums);\n// results is [[1, 4], 2, [3]]\n\t\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("ol",{attrs:{start:"12"}},[a("li",[a("strong",[s._v("slice(start, end)")]),s._v(": 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的"),a("strong",[s._v("浅拷贝")]),s._v("（包括 begin，不包括end）。原始数组不会被改变。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const animals = [\'ant\', \'bison\', \'camel\', \'duck\', \'elephant\'];\n\nconsole.log(animals.slice(2));\n// expected output: Array ["camel", "duck", "elephant"]\n\nconsole.log(animals.slice(2, 4));\n// expected output: Array ["camel", "duck"]\n\nconsole.log(animals.slice(1, 5));\n// expected output: Array ["bison", "camel", "duck", "elephant"]\n\t\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ol",{attrs:{start:"13"}},[a("li",[a("strong",[s._v("数组拆解:flat")]),s._v(": 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tvar arr1 = [1, 2, [3, 4]];\narr1.flat(); \n// [1, 2, 3, 4]\n\nvar arr2 = [1, 2, [3, 4, [5, 6]]];\narr2.flat();\n// [1, 2, 3, 4, [5, 6]]\n\nvar arr3 = [1, 2, [3, 4, [5, 6]]];\narr3.flat(2);\n// [1, 2, 3, 4, 5, 6]\n\n//使用 Infinity，可展开任意深度的嵌套数组\nvar arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];\narr4.flat(Infinity);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("ol",{attrs:{start:"14"}},[a("li",[a("p",[a("strong",[s._v("indexOf / lastIndexOf(value, fromIndex)")]),s._v(": 查找数组项，返回对应的下标 未找到返回 -1\nfromIndex  开始查找的位置\n"),a("strong",[s._v("在比较第一个参数与数组的每一项时，采用的全等(===)")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("reduce / reduceRight")])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tarr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n\treduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。\n\t\n\t[详解](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"16"}},[a("li",[a("strong",[s._v("flatMap()")]),s._v(" 相当于flat(1) 但是效率更高")])]),s._v(" "),a("h2",{attrs:{id:"会修改原来的数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#会修改原来的数组"}},[s._v("#")]),s._v(" 会修改原来的数组：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("forEach")]),s._v(": 无法break，可以用try/catch中throw new Error来停止")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tarr.forEach(callback(currentValue [, index [, array]])[, thisArg])\n\tarr.foreach( element => element * 2 );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[s._v("push")]),s._v(" / "),a("strong",[s._v("pop")]),s._v(": 末尾推入和弹出，改变原数组，")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tarr.push(element1, …, elementN) 返回新的arr.length\n\n\tarr.pop() // 删除最后一个元素 返回改元素的值\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[s._v("unshift")]),s._v(" / "),a("strong",[s._v("shift")]),s._v(": 头部推入和弹出，改变原数组，返回操作项")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tarr.shift() //删除 删除数组第一个元素，并且返回该元素的值\n\tarr.unshift(element1, …, elementN) // 像数组的开头添加元素，返回新的arr.length\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[a("strong",[s._v("sort(fn)")]),s._v(" / "),a("strong",[s._v("reverse")]),s._v(": 排序与反转，改变原数组")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("*使用映射改善排序*\n\n// 需要被排序的数组\nvar list = [‘Delta’, ‘alpha’, ‘CHARLIE’, ‘bravo’];\n\n// 对需要排序的数字和位置的临时存储\nvar mapped = list.map(function(el, i) {\n  return { index: i, value: el.toLowerCase() };\n})\n\n// 按照多个值排序数组\nmapped.sort(function(a, b) {\n  return +(a.value > b.value) || +(a.value === b.value) - 1;\n});\n\n// 根据索引得到排序的结果\nvar result = mapped.map(function(el){\n  return list[el.index];\n});\n\t\n//数组乱序：\n*var* arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\narr.sort(*function* () {\n    *return* Math.random() - 0.5;\n});\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[a("strong",[s._v("splice(start, number, value…)")]),s._v(": 返回删除元素组成的数组，value 为插入项，改变原数组")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const months = [\'Jan\', \'March\', \'April\', \'June\'];\nmonths.splice(1, 0, \'Feb\');\n// inserts at index 1\nconsole.log(months);\n// expected output: Array ["Jan", "Feb", "March", "April", "June"]\n\nmonths.splice(4, 1, \'May\');\n// replaces 1 element at index 4\nconsole.log(months);\n// expected output: Array ["Jan", "Feb", "March", "April", "May"]\n\t\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);
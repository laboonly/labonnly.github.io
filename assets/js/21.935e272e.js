(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{502:function(n,s,a){"use strict";a.r(s);var e=a(4),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",[n._v("当javascript项目达到一定体积时，将代码分成模块会更易于管理。但是，当这样做时，我们最终可能会导入实际上未使用的代码。Tree Shaking 是一种通过消除最终文件中未使用的代码来优化体积的方法。")])]),n._v(" "),a("p",[n._v("我们来举个例子，下面是一个简单的javascript文件，命名为mathUtils.js, 主要是实现了基础的数学运算。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('export function add(a, b) {\n    console.log("add");\n    return a + b;\n}\n\nexport function minus(a, b) {\n    console.log("minus");\n    return a - b;\n}\n\nexport function multiply(a, b) {\n    console.log("multiply");\n    return a * b;\n}\n\nexport function divide(a, b) {\n    console.log("divide");\n    return  a / b;\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br")])]),a("p",[n._v("在 index.js 里， 我们通过如下方式调用该文件：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('import { add } from "./mathUtils";\n\nadd(1, 2);\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("假设我们正在使用像 webpack 这样的工具来打包 mathUtils.js, 即使仅导入并使用了add()功能， 我们也会看到文件中所有的功能都包含在了最终输出当中。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\n/***/ "./src/mathUtils.js":\n/*!**************************!*\\\n  !*** ./src/mathUtils.js ***!\n  \\**************************/\n/*! exports provided: add, minus, multiply, divide */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n"use strict";\neval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"add\\", function() { return add; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"minus\\", function() { return minus; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"multiply\\", function() { return multiply; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"divide\\", function() { return divide; });\\nfunction add(a, b) {\\n    console.log(\\"add\\");\\n    return a + b;\\n}\\n\\nfunction minus(a, b) {\\n    console.log(\\"minus\\");\\n    return a - b;\\n}\\n\\nfunction multiply(a, b) {\\n    console.log(\\"multiply\\");\\n    return a * b;\\n}\\n\\nfunction divide(a, b) {\\n    console.log(\\"divide\\");\\n    return a / b;\\n}\\n\\n\\n//# sourceURL=webpack:///./src/mathUtils.js?");\n\n/***/ })\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("h2",{attrs:{id:"tree-shaking-是如何工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking-是如何工作的"}},[n._v("#")]),n._v(" Tree Shaking 是如何工作的")]),n._v(" "),a("p",[n._v("虽然Tree Shaking的概念早在1990年代就已经被提出")]),n._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[n._v('Dead code elimination in dynamic languages is a much harder problem than in static languages. The idea of a "treeshaker" originated in LISP in the 1990s.\n—— wikipedia')])]),n._v(" "),a("p",[n._v("但当真正作用到 javascript 中，是在 ES6 模块规范被提出之后，因为只有模块是用过 static 方式引用时， Tree Shaking 才会起作用。")]),n._v(" "),a("p",[n._v("在 ES6 模块规范之前，我们使用 require() 语法的 CommonJS 模块规范。 这些模块规范是动态加载的，这意味着我们可以根据代码中的条件导入新的模块。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nvar myDynamicModule;\n\nif (condition) {\n    myDynamicModule = require("foo");\n} else {\n    myDynamicModule = require("bar");\n} \n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("CommonJS模块的这种 dynamic 性质意味着无法应用Tree Shaking, 因为在实际运行代码之前无法确定需要那些模块。")]),n._v(" "),a("p",[n._v("在ES6中，引入了模块的新语法，这是 static 的。使用 import 语法，我们不再能够动态导入模块。")]),n._v(" "),a("p",[n._v("如下所示的代码是不被允许的:")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nif (condition) {\n    import foo from "foo";\n} else {\n    import bar from "bar";\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("相反， 我们必须在任何条件之外定义全局范围内的所有导入。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nimport foo from "foo";\nimport bar from "bar";\n\nif (condition) {\n    // do stuff with foo\n} else {\n    // do stuff with bar\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[n._v("除其他好处外，这种语法还可以有效地 Tree Shaking, 因为可以确定导入后使用的任何代码而无需先运行这些代码。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nimport { add, multiply } from "./mathUtils";\n\nadd(1, 2);\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("在上面的示例中， multiply() 从未使用过，将从最终的打包文件中删除。")]),n._v(" "),a("p",[n._v("甚至从从未访问过的导入对象中删除特定属性。")]),n._v(" "),a("p",[n._v("myinfo.js")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nexport const myInfo = {\n    name: "Ire Aderinokun",\n    birthday: "2 March"\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("index.js")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nimport { myInfo } from "./myInfo.js";\n\nconsole.log(myInfo.name);\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[n._v("在上面的示例中, birthday属性不会被输出到最终打包文件中, 因为从未实际使用过。")]),n._v(" "),a("p",[n._v("但是Tree Shaking并不能消除所有未使用的代码。(可拓展)")]),n._v(" "),a("h2",{attrs:{id:"副作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副作用"}},[n._v("#")]),n._v(" 副作用")]),n._v(" "),a("p",[n._v("一个副作用是：有一些代码，是在import时执行了一些行为，这些行为不一定和任何导出相关。例如 Polyfill， Polyfills 通常是在项目中全局引用，而不是在 index.js 中使用导入的方式引用。")]),n._v(" "),a("p",[n._v("Tree Shaking 并不能自动判断那些脚本是副作用，因此手动指定他们非常重要。")]),n._v(" "),a("h2",{attrs:{id:"如何使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[n._v("#")]),n._v(" 如何使用")]),n._v(" "),a("p",[n._v("Tree Shaking 通常是和打包工具配合使用，例如 Webpack，只需在配置文件中设置mode即可。")]),n._v(" "),a("p",[n._v("webpack.production.config.js")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nmodule.exports = {\n    ...,\n    mode: "production",\n    ...,\n};\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("要将某些文件标记为副作用， 我们需要将它们添加到package.json文件中。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\n{\n    ...,\n    "sideEffects": [\n        "./src/polyfill.js"\n    ],\n    ...,\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("有关如何使用 Webpack 接入 Tree Shaking 的更多信息， 请查看"),a("a",{attrs:{href:"https://webpack.js.org/guides/tree-shaking/",target:"_blank",rel:"noopener noreferrer"}},[n._v("文档"),a("OutboundLink")],1),n._v("。")])])}),[],!1,null,null,null);s.default=t.exports}}]);